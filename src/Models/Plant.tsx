/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { utils } from '../utils'
import { physics } from '../physics'
import { BODYSHAPE_BOX, BODYTYPE_DYNAMIC } from '../constants'

type GLTFResult = {
  nodes: {
    Circle: THREE.Mesh
    Circle_1: THREE.Mesh
    Circle_2: THREE.Mesh
    BoundingBox: THREE.Mesh
  }
  materials: {
    Dirt: THREE.MeshStandardMaterial
    Clay: THREE.MeshStandardMaterial
    Leaf: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/assets/glb/plant.glb') as unknown as GLTFResult
  
  useEffect(() => {
    const plant = group.current
    const transform = new Float32Array(10)
    utils.setRandomTransform(plant, transform)
    utils.getSize(new THREE.Mesh(nodes.BoundingBox.geometry), transform)

    physics.add(plant, {
      id: plant.id,
      name: plant.name,
      type: BODYTYPE_DYNAMIC,
      shape: BODYSHAPE_BOX,
      transform,
      mass: 1,
      linearDamping: 0,
      angularDamping: 0,
      friction: 0.3,
      restitution: 0.9
    })
  }, [])

  return (
    <group ref={group}>
      <Merged castShadow recieveShadow meshes={[
        nodes.Circle,
        nodes.Circle_1,
        nodes.Circle_2,
      ]}>
        {(C, C1, C2) => (
          <>
            <C material={materials.Dirt} />
            <C1 material={materials.Clay} />
            <C2 material={materials.Leaf} />
          </>
        )}
      </Merged>
    </group>
  )
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Plant" userData={{ name: 'Plant' }}>
        <mesh name="Circle" castShadow receiveShadow geometry={nodes.Circle.geometry} material={materials.Dirt} />
        <mesh name="Circle_1" castShadow receiveShadow geometry={nodes.Circle_1.geometry} material={materials.Clay} />
        <mesh name="Circle_2" castShadow receiveShadow geometry={nodes.Circle_2.geometry} material={materials.Leaf} />
      </group>
      <mesh
        visible={false}
        name="BoundingBox"
        castShadow
        receiveShadow
        geometry={nodes.BoundingBox.geometry}
        material={nodes.BoundingBox.material}
        position={[0, 0.196, 0.033]}
        userData={{ name: 'BoundingBox' }}
      />
    </group>
  )
}

useGLTF.preload('/assets/glb/plant.glb')
