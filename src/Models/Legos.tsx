/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import type { GLTF } from 'three-stdlib'
import { useGLTF } from '@react-three/drei'
import { physics } from '../physics'
import { BODYSHAPE_BOX, BODYTYPE_DYNAMIC } from '../constants'
import { utils } from '../utils'

type GLTFResult = GLTF & {
  nodes: {
    Lego1: THREE.Mesh
    Lego2: THREE.Mesh
    Lego3: THREE.Mesh
    Lego4: THREE.Mesh
    Lego5: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
  }
}

const url = new URL('../assets/glb/lego.glb', import.meta.url).href

const Legos = () => {
  const { nodes, materials } = useGLTF(url) as GLTFResult
  const refs = [useRef<THREE.Mesh>(), useRef(), useRef(), useRef(), useRef()]

  useEffect(() => {
    for (const lego of refs.map(ref => ref.current!)) {
      const transform = new Float32Array(10)
      utils.setRandomTransform(lego, transform)
      utils.getSize(lego, transform)

      physics.add(lego, {
        id: lego.id,
        name: lego.name,
        type: BODYTYPE_DYNAMIC,
        shape: BODYSHAPE_BOX,
        transform,
        mass: 1,
        linearDamping: 0,
        angularDamping: 0,
        friction: 0.3,
        restitution: 0.9,
      })

      utils.setRandomTorque(lego.id, 0.05)
    }
  }, [])

  return (
    <>
      <mesh
        name='Lego1'
        ref={refs[0]}
        castShadow
        receiveShadow
        geometry={nodes.Lego1.geometry}
        material={materials.Material}
      />
      <mesh
        name='Lego2'
        ref={refs[1]}
        castShadow
        receiveShadow
        geometry={nodes.Lego2.geometry}
        material={materials['Material.001']}
      />
      <mesh
        name='Lego3'
        ref={refs[2]}
        castShadow
        receiveShadow
        geometry={nodes.Lego3.geometry}
        material={materials['Material.002']}
      />
      <mesh
        name='Lego4'
        ref={refs[3]}
        castShadow
        receiveShadow
        geometry={nodes.Lego4.geometry}
        material={materials['Material.003']}
      />
      <mesh
        name='Lego5'
        ref={refs[4]}
        castShadow
        receiveShadow
        geometry={nodes.Lego5.geometry}
        material={materials['Material.004']}
      />
    </>
  )
}

export default Legos

useGLTF.preload(url)
