/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { Mesh } from 'three'
import { useGLTF, Merged } from '@react-three/drei'
import { utils } from '../utils'
import type { GLTF } from 'three-stdlib'
import * as sword from 'sword'

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    Cube001_2: THREE.Mesh
    Right_Stick: THREE.Mesh
    Left_Stick: THREE.Mesh
    Pad: THREE.Mesh
    Body001: THREE.Mesh
    Body002: THREE.Mesh
    Body003: THREE.Mesh
    Body004: THREE.Mesh
    Screen: THREE.Mesh
    Body005: THREE.Mesh
    Body006: THREE.Mesh
    BoundingBox: THREE.Mesh
  }
  materials: {
    Body: THREE.MeshStandardMaterial
    ['Body Black']: THREE.MeshStandardMaterial
    ['Body White']: THREE.MeshStandardMaterial
    Glass: THREE.MeshPhysicalMaterial
  }
}

const url = new URL('../assets/glb/switch.glb', import.meta.url).href

const Model = () => {
  const { nodes, materials } = useGLTF(url) as GLTFResult
  const ref = useRef<THREE.Group>()

  useEffect(() => {
    const current = ref.current!
    utils.setRandomTransform(current)

    const { geometry } = nodes.BoundingBox

    sword.createRigidBody(current, {
      canSleep: false,
      type: sword.RigidBodyType.Dynamic,
      collider: sword.ColliderType.ConvexHull,
      vertices: new Float32Array(geometry.attributes.position!.array),
      indices: geometry.index ? new Uint16Array(geometry.index.array) : null,
    }).then(id => utils.setRandomTorque(id, 0.05))
  }, [])

  return (
    <group name='Switch' ref={ref}>
      <Merged castShadow receiveShadow meshes={[
        nodes.Cube001,
        nodes.Cube001_1,
        nodes.Cube001_2,
        nodes.Right_Stick,
        nodes.Left_Stick,
        nodes.Pad,
        nodes.Body001,
        nodes.Body002,
        nodes.Body003,
        nodes.Body004,
        nodes.Body005,
        nodes.Body006,
        nodes.Screen,
      ]}>
        {(Node1, Node2, Node3, RightStick, LeftStick, Pad, Screen, B1, B2, B3, B4, B5, B6) => (
          <>
            <Node1 material={materials.Body} />
            <Node2 material={materials['Body Black']} />
            <Node3 material={nodes.Cube001_2.material} />
            <RightStick material={nodes.Right_Stick.material} />
            <LeftStick material={nodes.Left_Stick.material} />
            <Pad material={nodes.Pad.material} />
            <Screen material={materials.Glass} />
            <B1 material={nodes.Body001.material} />
            <B2 material={nodes.Body002.material} />
            <B3 material={nodes.Body003.material} />
            <B4 material={nodes.Body004.material} />
            <B5 material={nodes.Body005.material} />
            <B6 material={nodes.Body006.material} />
          </>
        )}
      </Merged>
    </group>
  )
}

useGLTF.preload(url)

export default Model
