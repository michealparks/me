/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Micheal: THREE.Mesh
    Title: THREE.Mesh
    BoundingBox1: THREE.Mesh
    BoundingBox2: THREE.Mesh
  }
  materials: {
    Text: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/name.glb') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Light" position={[0.6, 5.904, -1.005]} rotation={[1.89, 0.881, -2.045]} userData={{ name: 'Light' }}>
        <pointLight
          name="Light_Orientation"
          intensity={500}
          decay={2}
          color="#ff9951"
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: 'Light_Orientation' }}
        />
      </group>
      <group
        name="Camera"
        position={[-5.501, 7.903, 5.154]}
        rotation={[0.944, -0.554, 0.62]}
        userData={{ name: 'Camera' }}>
        <PerspectiveCamera
          name="Camera_Orientation"
          makeDefault={false}
          far={100}
          near={0.1}
          fov={22.895}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: 'Camera_Orientation' }}
        />
      </group>
      <mesh
        name="Micheal"
        castShadow
        receiveShadow
        geometry={nodes.Micheal.geometry}
        material={nodes.Micheal.material}
        userData={{ name: 'Micheal' }}
      />
      <mesh
        name="Title"
        castShadow
        receiveShadow
        geometry={nodes.Title.geometry}
        material={nodes.Title.material}
        userData={{ name: 'Title' }}
      />
      <mesh
        name="BoundingBox1"
        castShadow
        receiveShadow
        geometry={nodes.BoundingBox1.geometry}
        material={nodes.BoundingBox1.material}
        position={[-0.019, 0.035, -0.248]}
        userData={{ name: 'BoundingBox1' }}
      />
      <mesh
        name="BoundingBox2"
        castShadow
        receiveShadow
        geometry={nodes.BoundingBox2.geometry}
        material={nodes.BoundingBox2.material}
        position={[-0.019, 0.035, 0.258]}
        userData={{ name: 'BoundingBox2' }}
      />
    </group>
  )
}

useGLTF.preload('/name.glb')
