/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    Cube001_2: THREE.Mesh
    Right_Stick: THREE.Mesh
    Left_Stick: THREE.Mesh
    Pad: THREE.Mesh
    Body001: THREE.Mesh
    Body002: THREE.Mesh
    Body003: THREE.Mesh
    Body004: THREE.Mesh
    Screen: THREE.Mesh
    Body005: THREE.Mesh
    Body006: THREE.Mesh
    BoundingBox: THREE.Mesh
  }
  materials: {
    Body: THREE.MeshStandardMaterial
    ['Body Black']: THREE.MeshStandardMaterial
    ['Body White']: THREE.MeshStandardMaterial
    Glass: THREE.MeshPhysicalMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/assets/glb/switch.glb') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Body" userData={{ name: 'Body' }}>
        <mesh name="Cube001" castShadow receiveShadow geometry={nodes.Cube001.geometry} material={materials.Body} />
        <mesh
          name="Cube001_1"
          castShadow
          receiveShadow
          geometry={nodes.Cube001_1.geometry}
          material={materials['Body Black']}
        />
        <mesh
          name="Cube001_2"
          castShadow
          receiveShadow
          geometry={nodes.Cube001_2.geometry}
          material={nodes.Cube001_2.material}
        />
      </group>
      <mesh
        name="Right_Stick"
        castShadow
        receiveShadow
        geometry={nodes.Right_Stick.geometry}
        material={nodes.Right_Stick.material}
        userData={{ name: 'Right Stick' }}
      />
      <mesh
        name="Left_Stick"
        castShadow
        receiveShadow
        geometry={nodes.Left_Stick.geometry}
        material={nodes.Left_Stick.material}
        userData={{ name: 'Left Stick' }}
      />
      <mesh
        name="Pad"
        castShadow
        receiveShadow
        geometry={nodes.Pad.geometry}
        material={nodes.Pad.material}
        userData={{ name: 'Pad' }}
      />
      <mesh
        name="Body001"
        castShadow
        receiveShadow
        geometry={nodes.Body001.geometry}
        material={nodes.Body001.material}
        userData={{ name: 'Body.001' }}
      />
      <mesh
        name="Body002"
        castShadow
        receiveShadow
        geometry={nodes.Body002.geometry}
        material={nodes.Body002.material}
        userData={{ name: 'Body.002' }}
      />
      <mesh
        name="Body003"
        castShadow
        receiveShadow
        geometry={nodes.Body003.geometry}
        material={nodes.Body003.material}
        userData={{ name: 'Body.003' }}
      />
      <mesh
        name="Body004"
        castShadow
        receiveShadow
        geometry={nodes.Body004.geometry}
        material={nodes.Body004.material}
        userData={{ name: 'Body.004' }}
      />
      <mesh
        name="Screen"
        castShadow
        receiveShadow
        geometry={nodes.Screen.geometry}
        material={materials.Glass}
        userData={{ name: 'Screen' }}
      />
      <mesh
        name="Body005"
        castShadow
        receiveShadow
        geometry={nodes.Body005.geometry}
        material={nodes.Body005.material}
        userData={{ name: 'Body.005' }}
      />
      <mesh
        name="Body006"
        castShadow
        receiveShadow
        geometry={nodes.Body006.geometry}
        material={nodes.Body006.material}
        userData={{ name: 'Body.006' }}
      />
      <mesh
        name="BoundingBox"
        castShadow
        receiveShadow
        geometry={nodes.BoundingBox.geometry}
        material={nodes.BoundingBox.material}
        position={[-0.022, 0.004, 0.013]}
        userData={{ name: 'BoundingBox' }}
      />
    </group>
  )
}

useGLTF.preload('/assets/glb/switch.glb')
